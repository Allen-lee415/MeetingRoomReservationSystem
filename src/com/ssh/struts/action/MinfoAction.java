/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ssh.struts.action;



import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.text.SimpleDateFormat;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.util.PropertyFilter;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.java.fetion.JavaFetion;
import com.ssh.hibernate.Meetinginfo;
import com.ssh.hibernate.MeetinginfoDAO;
import com.ssh.hibernate.Meetingroominfo;
import com.ssh.hibernate.MeetingroominfoDAO;
import com.ssh.hibernate.Userinfo;
import com.ssh.hibernate.UserinfoDAO;
import com.ssh.struts.form.MinfoForm;

/** 
 * MyEclipse Struts
 * Creation date: 04-19-2014
 * 
 * XDoclet definition:
 * @struts.action path="/userinfo" name="userinfoForm" input="/form/userinfo.jsp" scope="request" validate="true"
 */
public class MinfoAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException 
	 */
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
	    MinfoForm meetForm = (MinfoForm) form;// TODO Auto-generated method stub
	   System.out.println("into add action");
	   int num=mDao.count()+2;
	   String id;
	   if(num<10){
	    id="ME00"+num;
	   }else if(10<=num&&num<100){
		id="ME0"+num; 
	   }else{
		id="ME"+num;
	   }
	   System.out.println(id);
	   meet.setMeetingId(id);
	   
	  String userid=request.getParameter("userid"); //级联user信息
	   //String userid="YH005";
	   userinfo=uiDao.findById(userid);
	   meet.setUserinfo(userinfo);
	   
	  String meetingroomId=request.getParameter("mrid");//级联会议室信息
	   //String meetingroomId="MR001";
	   mrinfo=mrDao.findById(meetingroomId);
	   String name=mrinfo.getMeetingroomName();
	   meet.setMeetingroominfo(mrinfo);
	   
	 
	   meet.setDate(meetForm.getDate());
	   meet.setStartTime(meetForm.getStartTime());
	   meet.setEndTime(meetForm.getEndTime());
	   meet.setTopic(meetForm.getTopic());
	   mDao.save(meet);
	  //feshion 
	   String message="您好，感谢使用会议室预约管理系统，您已成功预订"+name+"，时间:"+meetForm.getDate()+","+meetForm.getStartTime()+"到"+meetForm.getEndTime()+"，请准时使用会议室并注意爱护公共财物，谢谢！如有任何问题，请致电本管理中心029-87654321";
	   JavaFetion fetion = new JavaFetion("18710835173", "67436412");
	      fetion.send("18710835173",message );
	   
	   response.getWriter().write(id.toString());
	   return null;
	}
	
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	   System.out.println("into list action");
	   List list=mDao.findAll();
	   request.setAttribute("list", list);
	   return mapping.findForward("list");
	}
	
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	   System.out.println("into delete action");
	   String id=request.getParameter("id");
	   meet=mDao.findById(id);
	   mDao.delete(meet);
	   return this.queryByPage(mapping, form, request, response);
	}
	
	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	   System.out.println("into edit action");
	   String id=request.getParameter("id");
	   meet=mDao.findById(id);
	   request.setAttribute("meet", meet);
	   return mapping.findForward("edit");
	}
	
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	   System.out.println("into update1 action");
	   MinfoForm meetForm = (MinfoForm) form;
	  
	   meet.setMeetingId(request.getParameter("id"));
	   meet.setDate(meetForm.getDate());
	   meet.setStartTime(meetForm.getStartTime());
	   meet.setEndTime(meetForm.getEndTime());
	   meet.setTopic(meetForm.getTopic());
	   System.out.println("!!!!!!"+meet.getUserinfo());

	   mDao.attachDirty(meet);
	   return this.list(mapping, form, request, response);
	}

	public ActionForward getCountNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	   System.out.println("into getCountNum action");
	   
	   System.out.println(mDao.count());
	   return null;
	}
	
	public ActionForward queryByPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	   System.out.println("into queryByPage action");
	   String hql="from Meetinginfo";
	   int firstResult=0;
	   int maxResult=10;
	   if(request.getParameter("firstResult")==null){
		   firstResult=0;
		}else{
		   firstResult=Integer.parseInt(request.getParameter("firstResult"));
		}
	   
	   int totalNum=mDao.count();
	 
	   int totalPage=0;
	   if(totalNum%maxResult==0){
	     totalPage=totalNum/maxResult;
	   }else{
	     totalPage=totalNum/maxResult+1;
	   }
	   int currentPage=firstResult/maxResult+1;
		   //下一页时候firstresult和muxrult各加3
	   
	   List list=mDao.listByPage(hql, firstResult, maxResult);
	   request.setAttribute("list", list);
	  
	   request.setAttribute("firstResult",Integer.valueOf(firstResult));
	   request.setAttribute("maxResult",Integer.valueOf(maxResult));
	   request.setAttribute("totalNum", Integer.valueOf(totalNum));
	   request.setAttribute("totalPage", Integer.valueOf(totalPage));
	   request.setAttribute("currentPage", Integer.valueOf(currentPage));
	   return mapping.findForward("list");
	}
	
	//ajax查出所有当月的预约记录
	
	public ActionForward findByMonth(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
	   System.out.println("into findByMonth action");
	   String month=request.getParameter("month");
	   List list=mDao.findByMonth(month);
	   
	   JsonConfig jc=new JsonConfig();
	   jc.setJsonPropertyFilter(new PropertyFilter() {
		
		public boolean apply(Object list, String name, Object arg2) {
			// TODO Auto-generated method stub
			if(name.equals("userinfo")||name.equals("meetingroominfo")||name.equals("meetinginfos")){
			return true;
			}else{
				return false;
			}
		}
	});
       System.out.println(list);
       JSONObject obj=new JSONObject();
       JSONArray arr=JSONArray.fromObject(list, jc);
       obj.put("list",arr);
		PrintWriter out=response.getWriter();
		System.out.println(obj.toString());
		out.print(obj.toString());
		out.flush();
		out.close();  
	 return null;  
	}
	
//ajax查出所有要更新的信息
	
	public ActionForward findById(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
	   System.out.println("into findById action");
	   String meetid=request.getParameter("meetid");
	  Meetinginfo minfo=mDao.findById(meetid);
	   
	   JsonConfig jc=new JsonConfig();
	   jc.setJsonPropertyFilter(new PropertyFilter() {
		
		public boolean apply(Object list, String name, Object arg2) {
			// TODO Auto-generated method stub
			if(name.equals("userinfo")||name.equals("meetingroominfo")||name.equals("meetinginfos")){
			return true;
			}else{
				return false;
			}
		}
	});
       
       JSONObject obj=new JSONObject();
       JSONArray arr=JSONArray.fromObject(minfo, jc);
       obj.put("minfo",arr);
		PrintWriter out=response.getWriter();
		System.out.println(obj.toString());
		out.print(obj.toString());
		out.flush();
		out.close();  
	 return null;  
	}
	//ajax update
	public ActionForward updateByAjax(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	   System.out.println("into updateByAjax action");
	   System.out.println(request.getParameter("meetid"));
	   System.out.println(request.getParameter("startTime"));
	   System.out.println(request.getParameter("endTime"));
	   System.out.println(meet.getUserinfo());
	   meet.setMeetingId(request.getParameter("meetid"));
	   meet.setStartTime(request.getParameter("startTime"));
	   meet.setEndTime(request.getParameter("endTime"));
	   meet.setTopic(request.getParameter("topic"));
	   mDao.attachDirty(meet);
	   return null;
	}
	
	//5-7添加，AJAX，为了按照会议室id和月份来查出所有的预约情况
	
	public ActionForward findByMonthAndMrid(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
	   System.out.println("into findByMonthAndMrid action");
	   String month=request.getParameter("month");
	   String mrid=request.getParameter("mrid");
	   List list=mDao.findByMonthAndMrid(month,mrid);
	   
	   JsonConfig jc=new JsonConfig();
	   jc.setJsonPropertyFilter(new PropertyFilter() {
		
		public boolean apply(Object list, String name, Object arg2) {
			// TODO Auto-generated method stub
			if(name.equals("userinfo")||name.equals("meetingroominfo")||name.equals("meetinginfos")){
			return true;
			}else{
				return false;
			}
		}
	});
       System.out.println(list);
       JSONObject obj=new JSONObject();
       JSONArray arr=JSONArray.fromObject(list, jc);
       obj.put("list",arr);
		PrintWriter out=response.getWriter();
		System.out.println(obj.toString());
		out.print(obj.toString());
		out.flush();
		out.close();  
	 return null;  
	}
	

	
	//导出excel
	public ActionForward toExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("会议室预约使用记录");
			HSSFRow row = sheet.createRow((int) 0);
			HSSFCellStyle style = wb.createCellStyle();
			style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式
			HSSFCell cell = row.createCell((short) 0);
			cell.setCellValue("编号");
			cell.setCellStyle(style);
			cell = row.createCell((short) 1);
			cell.setCellValue("用户编号");
			cell.setCellStyle(style);
			cell = row.createCell((short) 2);
			cell.setCellValue("会议室编号");
			cell.setCellStyle(style);
			cell = row.createCell((short) 3);
			cell.setCellValue("日期");
			cell.setCellStyle(style);
			cell = row.createCell((short) 4);
			cell.setCellValue("开始时间");
			cell.setCellStyle(style);
			cell = row.createCell((short) 5);
			cell.setCellValue("结束时间");
			cell.setCellStyle(style);
			cell = row.createCell((short) 6);
			cell.setCellValue("会议主题");
			cell.setCellStyle(style);

			 List list=mDao.findAll();

			for (int i = 0; i < list.size(); i++)
			{   row = sheet.createRow((int) i + 1);
				meet = (Meetinginfo) list.get(i);
				row.createCell((short) 0).setCellValue(meet.getMeetingId());
				row.createCell((short) 1).setCellValue(meet.getUserinfo().getUserId());
				row.createCell((short) 2).setCellValue(meet.getMeetingroominfo().getMeetingroomId());
				row.createCell((short) 3).setCellValue(meet.getDate());
				row.createCell((short) 4).setCellValue(meet.getStartTime()); 
				row.createCell((short) 5).setCellValue(meet.getEndTime());
				row.createCell((short) 6).setCellValue(meet.getTopic());
			}
			
			try
			{
				FileOutputStream fout = new FileOutputStream("C:/Users/lee/Desktop/meeting.xls");
				wb.write(fout);
				fout.close();
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
			
			String result="['导出成功']";
        	JSONArray jsonArray = JSONArray.fromObject(result);
        	JSONObject jsonObject = new JSONObject();  
            jsonObject.put("result", jsonArray);  
            System.out.println(jsonObject.toString());
            response.setCharacterEncoding("utf-8");
            response.getWriter().write(jsonObject.toString());   
			response.getWriter().flush();
			response.getWriter().flush();
	        return null;
	      }
	
	
	Meetinginfo meet;

	MeetinginfoDAO mDao;
	Userinfo userinfo;
	Meetingroominfo mrinfo;
	UserinfoDAO uiDao;
	MeetingroominfoDAO mrDao;

	public Meetinginfo getMeet() {
		return meet;
	}

	public void setMeet(Meetinginfo meet) {
		this.meet = meet;
	}

	public MeetinginfoDAO getmDao() {
		return mDao;
	}

	public void setmDao(MeetinginfoDAO mDao) {
		this.mDao = mDao;
	}

	public Userinfo getUserinfo() {
		return userinfo;
	}

	public void setUserinfo(Userinfo userinfo) {
		this.userinfo = userinfo;
	}

	public Meetingroominfo getMrinfo() {
		return mrinfo;
	}

	public void setMrinfo(Meetingroominfo mrinfo) {
		this.mrinfo = mrinfo;
	}

	public UserinfoDAO getUiDao() {
		return uiDao;
	}

	public void setUiDao(UserinfoDAO uiDao) {
		this.uiDao = uiDao;
	}

	public MeetingroominfoDAO getMrDao() {
		return mrDao;
	}

	public void setMrDao(MeetingroominfoDAO mrDao) {
		this.mrDao = mrDao;
	}


       
	

	
}